#!/bin/bash

### OPTIONS ###

set -e
set -o pipefail


### FUNCTIONS ###

script_msg()
{
    echo -e "--- ${*} ---"
}

fatal_error() {
    script_msg "\tFATAL ERROR: ${*}" >&2
    exit 1
}

### ERROR CHECKING ###

if [ -n "$1" ]; then
    crontracker_log_repo="$1"
else
    fatal_error "usage: crontracker CRONTRACKER_LOG_REPO"
fi

### MAIN ###

# Make crontracker_log_repo if it doesn't exist
if [ ! -d "$crontracker_log_repo" ]; then
    mkdir -p "$crontracker_log_repo"
fi

# cd there so that we don't have to worry about paths as much
cd "$crontracker_log_repo" || fatal_error "Failed to cd to $crontracker_log_repo"

cronlog="crontab.$(id -un).$(uname -n).txt"

# If we aren't in a git repo, initialize one
if [ ! -d ".git" ]; then
    git init
    crontab -l > "$cronlog"
    git add "$cronlog"
    git commit -m "Initial version of $cronlog"
    # Exit here; no sense in continuing since there can't be any diffs
    echo "Successfully initialized $crontracker_log_repo; exiting"
    exit 0
fi

# If $cronlog has local modifications then that means something else has changed
# it. Bail out here since we don't know why that has happened
if ! git diff --quiet -- "$cronlog"; then
    fatal_error "ERROR: $cronlog has been locally modified! Bailing out; this will need to be fixed by hand!"
fi

# Dump the current crontab
crontab -l > "$cronlog"

# If it is different than it was before, commit the changes
if [ -n "$(git status --porcelain --short  -- "$cronlog")" ]; then
    echo
    script_msg "${USER}@${HOSTNAME}'s crontab has been changed; committing changes"
    last_modified="$(git log -1 --format=%cd -- "$cronlog")" || fatal_error "Could not detect last modification of $cronlog"
    git add -- "$cronlog" || fatal_error "Failed to add $cronlog"
    git commit -m "\"Update to $cronlog detected; last modified at $last_modified\"" || fatal_error "Failed to commit changes to $cronlog"
fi
